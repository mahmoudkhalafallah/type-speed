{"version":3,"sources":["components/InfoList.tsx","components/Quote.tsx","components/Racer.tsx","constants.ts","views/Game.tsx","views/History.tsx","views/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledInfoList","styled","ul","StyledInfoItem","li","InfoList","endGame","gameOver","wpm","cp","historyId","useState","minutes","seconds","time","setTime","stopGame","useCallback","timerHandle","clearInterval","useEffect","setInterval","t","length","to","target","rel","StyledQuote","div","GreenText","span","RedText","ActiveText","Quote","data","index","isValid","slice","join","UserEntry","input","NoInteractions","GameContainer","section","Racer","setWpm","setCp","quoteText","setQuoteText","typedText","setTypedText","wordIndex","setWordIndex","typedTextValiditiy","setTypedTextValiditiy","secondsElapsed","setSecondsElapsed","fetch","then","res","text","replace","split","calculateCp","parseInt","toFixed","s","typedChars","value","onChange","e","val","startsWith","nativeEvent","c","readOnly","GameOver","h2","PlayAgainBtn","button","HistoryContainer","HistoryTable","table","Game","location","setGameOver","restartGame","setRestartGame","completionPercent","setCompletionPercent","gameRecordsHistoryId","setGameRecordsHistoryId","console","log","method","headers","body","JSON","stringify","json","splittedText","uri","catch","err","className","onClick","state","history","map","h","date","Date","key","getMonth","getDate","getFullYear","getHours","getMinutes","RecordList","RecordItem","RecordNum","b","History","gameRecordsHistoryData","setGameRecordsHistoryData","dataLoaded","setDataLoaded","finally","FormContainer","LoginForm","form","FormGroup","BtnStyle","css","SubmitBtn","PlayBtn","Link","Separator","users","Login","useForm","register","handleSubmit","errors","setError","onSubmit","user","find","username","password","navigate","name","ref","required","placeholder","type","App","path","noThrow","default","from","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a9b1127.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Link } from '@reach/router'\n\nconst StyledInfoList = styled.ul`\nalign-self: flex-end;\ntext-align: end;\nmargin: 25px 0;\nfont-weight: bold;\nlist-style: none;\n`\nconst StyledInfoItem = styled.li`\nmargin-bottom: 5px;\n`\n\ninterface Props {\n    endGame: React.Dispatch<React.SetStateAction<boolean>>;\n    gameOver: boolean;\n    wpm: number;\n    cp: number;\n    historyId: string\n}\n\nconst InfoList: React.FC<Props> = ({ endGame, gameOver, wpm, cp, historyId }) => {\n    const [time, setTime] = useState({ minutes: 3, seconds: 0 })\n\n    const stopGame = useCallback((timerHandle: NodeJS.Timeout) => {\n        clearInterval(timerHandle)\n        endGame(true)\n    }, [endGame])\n\n\n    useEffect(() => {\n        const timerHandle = setInterval(() => {\n            if (time.seconds > 0) {\n                setTime(t => ({ minutes: t.minutes, seconds: t.seconds - 1 }))\n            } else if (time.seconds === 0) {\n                if (time.minutes === 0) {\n                    stopGame(timerHandle)\n                    return\n                }\n                setTime(t => ({ minutes: t.minutes - 1, seconds: 59 }))\n            }\n        }, 1000)\n\n        if (gameOver) {\n            stopGame(timerHandle)\n            return\n        }\n\n        return () => {\n            clearInterval(timerHandle)\n        }\n    }, [gameOver, stopGame, time.minutes, time.seconds])\n\n    return <StyledInfoList>\n        <StyledInfoItem>Time: {time.minutes}:{time.seconds > 9 ? time.seconds : `0${time.seconds}`}</StyledInfoItem>\n        <StyledInfoItem>\n            <span>{wpm}</span> WPM\n\t\t</StyledInfoItem>\n        {gameOver && <StyledInfoItem>\n            Completion Percentage: <span>{cp}</span>%\n\t\t</StyledInfoItem>}\n        {(historyId.length > 0) && <StyledInfoItem>Find your record <Link to={`/history/${historyId}`} target='_blank' rel=\"noopener noreferrer\" >here</Link></StyledInfoItem>}\n    </StyledInfoList>\n}\n\nexport default InfoList\n","import React from 'react'\nimport styled from \"styled-components\"\n\nconst StyledQuote = styled.div`\nwidth: 100%;\npadding: 15px;\nfont-size: 20px;\nbackground: #e7e7e7;\nuser-select: none;\n`\n\nconst GreenText = styled.span`\ncolor: green;\n`\n\nconst RedText = styled.span`\nbackground: #e34d4d;\ncolor: #fff;\n`\n\nconst ActiveText = styled.span`\ntext-decoration: underline;\n`\n\ninterface Props {\n    data: string[];\n    index: number;\n    length: number;\n    isValid: boolean;\n}\n\nconst Quote: React.FC<Props> = ({ data, index, length, isValid }) => <StyledQuote>\n    {data.length && data.slice(0, index).join(\" \")}\n    {(index > 0) && \" \"}\n    {data[index] && (isValid ? <GreenText>{data[index].slice(0, length)}</GreenText> : <RedText>{data[index].slice(0, length)}</RedText>)}\n    {data[index] && <ActiveText>{data[index].slice(length)}</ActiveText>}\n    {\" \"}\n    {data.length && data.slice(index + 1).join(\" \")}\n</StyledQuote>\n\nexport default Quote","import React, { useEffect, useState } from 'react'\n\nimport styled from 'styled-components'\nimport Quote from './Quote'\nimport { QUOTE_URL } from '../constants'\n\nconst UserEntry = styled.input`\nwidth: 100%;\npadding: 14px;\nmargin-top: 15px;\nfont-size: 20px;\ndisplay: block;\nborder: 1px solid #ffb800;\n`\n\nconst NoInteractions = styled.div`\nbackground: rgba(238, 238, 238, 0.5);\nwidth: 100%;\nheight: 100%;\nposition: absolute;\n`\nconst GameContainer = styled.section`\nposition: relative\n`\n\ninterface Props {\n    gameOver: boolean;\n    endGame: React.Dispatch<React.SetStateAction<boolean>>;\n    setWpm: React.Dispatch<React.SetStateAction<number>>;\n    setCp: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst Racer: React.FC<Props> = ({ gameOver, endGame, setWpm, setCp }) => {\n    const [quoteText, setQuoteText] = useState([''])\n    const [typedText, setTypedText] = useState('')\n    const [wordIndex, setWordIndex] = useState(0)\n    const [typedTextValiditiy, setTypedTextValiditiy] = useState(false)\n    const [secondsElapsed, setSecondsElapsed] = useState(0)\n\n    const handleChange = (e: any) => {\n        const val = e.target.value\n        setTypedTextValiditiy(val.length > 0 && quoteText[wordIndex].startsWith(val))\n\n        if (e.nativeEvent.data === ' ' && quoteText[wordIndex] === val.slice(0, -1)) {\n            setTypedText('')\n            if (wordIndex === quoteText.length - 1) {\n                endGame(true)\n            }\n            setWordIndex(c => c + 1)\n        } else {\n\n            setTypedText(val)\n        }\n    }\n\n    useEffect(() => {\n        fetch(QUOTE_URL).then(res => res.text()).then((data: string) => {\n            data = data.replace(/\\s{2,}/g, ' ') // remove extra spaces\n            setQuoteText(data.split(\" \"))\n        })\n    }, [])\n\n    useEffect(() => {\n        const timerHandle = setInterval(() => {\n            if (gameOver) {\n                clearInterval(timerHandle)\n                const calculateCp = (quoteText.slice(0, wordIndex).join(' ').length / quoteText.join(' ').length) * 100\n                setCp(parseInt(calculateCp.toFixed()))\n                return\n            }\n            setSecondsElapsed(s => s + 1)\n            const typedChars = quoteText.slice(0, wordIndex).join(' ').length\n            if (secondsElapsed > 0) {\n                setWpm(parseInt(((typedChars / 5) / (secondsElapsed / 60)).toFixed()))\n            }\n        }, 1000)\n        return () => {\n            clearInterval(timerHandle)\n        }\n    }, [gameOver, quoteText, secondsElapsed, setCp, setWpm, wordIndex])\n\n    return (\n        <GameContainer>\n            {gameOver && <NoInteractions />}\n            {(quoteText.length > 1) &&\n                <>\n                    <Quote data={quoteText} index={wordIndex} length={typedText.length} isValid={typedTextValiditiy} />\n                    <UserEntry value={typedText} onChange={handleChange} readOnly={gameOver} />\n                </>\n            }\n        </GameContainer>\n    )\n}\n\nexport default Racer","export const HISTORY_URL = 'https://api.myjson.com/bins'\nexport const QUOTE_URL = 'https://baconipsum.com/api/?type=meat-and-filler&paras=1&format=text'","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport InfoList from '../components/InfoList'\nimport Racer from '../components/Racer'\nimport { HISTORY_URL } from '../constants'\nimport { RouteComponentProps } from \"@reach/router\" // eslint-disable-line no-unused-vars\n\nconst GameOver = styled.h2`\ntransition: 0.2s ease;\ncolor: #c90000;\nfont-size: 48px;\nz-index: 5;\ntext-align: center;\n`\n\nconst PlayAgainBtn = styled.button`\ndisplay: block;\nmargin: 0 auto;\nbackground: #000;\nborder: 0;\npadding: 15px 20px;\ncolor: #fcc944;\nfont-size: 20px;\ncursor: pointer;\nfont-weight: bold;\ntransition: color, transform 0.3s ease;\n&:hover {\n    background: #1c9d1c;\n    color: #fff;\n    transform: scale(1.1);\n}\n`\n\nconst HistoryContainer = styled.section`\nbackground: #fff;\npadding: 20px;\nmargin: 50px 0;\n.section-header {\n    margin: 0;\n}\n`\n\nconst HistoryTable = styled.table`\n    width: 100%;\n    margin-top: 25px;\n    th, td {\n        text-align: start;\n        padding: 10px 5px;\n    }\n    tbody tr:nth-child(odd) {\n        background: #eee;\n    }\n`\n\nconst Game: React.FC<RouteComponentProps> = ({ location }) => {\n    const [gameOver, setGameOver] = useState(false)\n    const [restartGame, setRestartGame] = useState(false)\n    const [wpm, setWpm] = useState(0)\n    const [completionPercent, setCompletionPercent] = useState(0)\n    const [gameRecordsHistoryId, setGameRecordsHistoryId] = useState('')\n    console.log(location)\n    useEffect(() => {\n        if (gameOver && completionPercent > 0) {\n            fetch(HISTORY_URL,\n                {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        wpm,\n                        cp: completionPercent\n                    })\n                }\n            ).then(res => res.json()).then((data: { uri: string }) => {\n                const splittedText = data.uri.split('/')\n                setGameRecordsHistoryId(splittedText[splittedText.length - 1])\n            })\n                .catch((err) => {\n                    console.log(err)\n                })\n        }\n    }, [gameOver, completionPercent, wpm])\n\n\n    useEffect(() => {\n        if (restartGame) {\n            setGameOver(false)\n            setRestartGame(false)\n        }\n    }, [restartGame])\n\n    return (\n        <div className=\"Game\">\n            {gameOver && <>\n                <GameOver>Game Over</GameOver>\n                <PlayAgainBtn onClick={() => { setRestartGame(true) }}>Play Again!</PlayAgainBtn>\n            </>}\n            {\n                !restartGame &&\n                <>\n                    <InfoList gameOver={gameOver} endGame={setGameOver} wpm={wpm} cp={completionPercent} historyId={gameRecordsHistoryId} />\n                    <Racer gameOver={gameOver} endGame={setGameOver} setWpm={setWpm} setCp={setCompletionPercent} />\n                </>\n            }\n            {\n                (location && location.state && location.state.history) ? <HistoryContainer>\n                    <h2 className='section-header'>History</h2>\n                    <HistoryTable>\n                        <thead>\n                            <tr>\n                                <th />\n                                <th>Date</th>\n                                <th>WPM</th>\n                                <th>Completion Percent</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {location.state.history.map(\n                                (h: any, index: number) => {\n                                    const date = new Date(+h.date)\n                                    return <tr key={h.date}>\n                                        <td>{index + 1}</td>\n                                        <td>{`\n                                            ${date.getMonth()}-${date.getDate()}-${date.getFullYear()}\n                                             ${date.getHours()}:${date.getMinutes()}\n                                            `}</td>\n                                        <td>{h.wpm}</td>\n                                        <td>{h.cp}</td>\n                                    </tr>\n                                }\n                            )}\n                        </tbody>\n                    </HistoryTable>\n                </HistoryContainer> : null\n            }\n        </div>\n    )\n}\n\nexport default Game\n","import React, { useEffect, useState } from 'react'\nimport { HISTORY_URL } from '../constants'\nimport { RouteComponentProps } from \"@reach/router\" // eslint-disable-line no-unused-vars\nimport styled from 'styled-components'\n\ndeclare interface Props extends RouteComponentProps {\n    historyId?: string\n}\n\nconst RecordList = styled.ul`\nlist-style: none;\npadding: 0;\n`\n\nconst RecordItem = styled.li`\ndisplay: flex;\njustify-content: space-between;\nfont-size: 20px;\n`\nconst RecordNum = styled.b`\nmargin-left: 15px;\n`\n\nconst History: React.FC<Props> = ({ historyId }) => {\n\n    const [gameRecordsHistoryData, setGameRecordsHistoryData] = useState({ \"wpm\": \"\", \"cp\": \"\" })\n    const [dataLoaded, setDataLoaded] = useState(false)\n\n\n    useEffect(() => {\n        if (historyId && historyId.length > 0) {\n            fetch(`${HISTORY_URL}/${historyId}`)\n                .then(res => res.json())\n                .then((data: { \"wpm\": string, \"cp\": string }) => {\n                    setGameRecordsHistoryData(data)\n                }).finally(() => {\n                    setDataLoaded(true)\n                })\n        }\n    }, [historyId])\n\n    return <>\n        {(gameRecordsHistoryData.wpm && gameRecordsHistoryData.cp) ?\n            <RecordList>\n                <RecordItem>Words per minute: <RecordNum>{gameRecordsHistoryData.wpm}</RecordNum>WPM</RecordItem>\n                <RecordItem>Completion Percentage: <RecordNum>{gameRecordsHistoryData.cp}</RecordNum> %</RecordItem>\n            </RecordList> :\n            dataLoaded ? <h2>No Records</h2> : <span>Loading</span>\n        }\n    </>\n}\n\nexport default History","import React from \"react\"\nimport { RouteComponentProps, Link, navigate } from \"@reach/router\" // eslint-disable-line no-unused-vars\nimport useForm from 'react-hook-form'\nimport styled, { css } from \"styled-components\"\n\nconst FormContainer = styled.section`\ndisplay: flex;\nflex-direction: column;\nbackground: #fff;\npadding: 20px;\nmargin-top: 20px;\nbox-shadow: 0px 4px 5px rgba(0, 0, 0, 0.5);\n.err-msg {\n    color: red;\n    margin: 5px 0;\n}\n`\n\nconst LoginForm = styled.form`\ndisplay: flex;\nflex-direction: column;\n`\n\nconst FormGroup = styled.div`\n    margin-bottom: 20px;\n    input {\n        padding: 15px;\n        border: 1px solid #eee;\n        background: #eee;\n    }\n`\n\nconst BtnStyle = css`\ncolor: #fff;\npadding: 15px;\nborder: 0;\ncursor: pointer;\ntransition: 0.3s ease-in-out;\ntext-align: center;\n`\n\n\nconst SubmitBtn = styled.button`\n${BtnStyle};\nbackground: #0f9b0f;\n&:hover {\n    background: #0d6e0d;\n}\n`\n\nconst PlayBtn = styled(Link)`\n${BtnStyle};\nbackground: #9c1515;\ntext-decoration: none;\n&:hover {\n    background: #6e0d0d;\n}\n`\n\nconst Separator = styled.div`\ntext-align: center;\nmargin: 15px 0;\ncolor: #818181;\n`\n\nconst users = [\n    {\n        \"name\": \"John\",\n        \"username\": \"johndoe\",\n        \"password\": \"123456\",\n        \"history\": [\n            {\n                \"date\": \"1576992633000\",\n                \"wpm\": \"20\",\n                \"cp\": \"30\"\n            }, {\n                \"date\": \"1576952634000\",\n                \"wpm\": \"10\",\n                \"cp\": \"20\"\n            }, {\n                \"date\": \"1576932635000\",\n                \"wpm\": \"30\",\n                \"cp\": \"10\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Sarah\",\n        \"username\": \"sarahdoe\",\n        \"password\": \"123456\",\n        \"history\": [\n            {\n                \"date\": \"1576932633000\",\n                \"wpm\": \"30\",\n                \"cp\": \"100\"\n            }\n        ]\n    }\n]\n\ninterface Props extends RouteComponentProps {\n\n}\n\nconst Login: React.FC<Props> = () => {\n    const { register, handleSubmit, errors, setError } = useForm()\n    const onSubmit = (data: any) => {\n        const user = users.find((user) => {\n            if (\n                user.username === data.username &&\n                user.password === data.password\n            ) {\n                return user\n            }\n            return undefined\n        })\n        if (user) {\n            navigate('game', { state: user })\n        } else {\n            setError('username', 'invalidCredentials')\n            setError('password', 'invalidCredentials')\n        }\n        console.log(errors)\n    }\n\n    return (\n        <FormContainer>\n            <LoginForm onSubmit={handleSubmit(onSubmit)}>\n                <FormGroup>\n                    <input name=\"username\" ref={register({ required: true })} placeholder='Username' />\n                    <div className='err-msg'>{(errors.username?.type === 'required') && 'Username is required.'}</div>\n                </FormGroup>\n                <FormGroup>\n                    <input name=\"password\" ref={register({ required: true })} placeholder='Password' type='password' />\n                    <div className='err-msg'>{(errors.password?.type === 'required') && 'Password is required'}</div>\n                </FormGroup>\n                <div className='err-msg'>{\n                    (errors.username?.type === 'invalidCredentials') &&\n                    (errors.password?.type === 'invalidCredentials') &&\n                    'Invalid username or password'}\n                </div>\n                <SubmitBtn>Login</SubmitBtn>\n            </LoginForm>\n            <Separator>\n                OR\n            </Separator>\n            <PlayBtn to='game'>Play Now</PlayBtn>\n        </FormContainer>\n    )\n}\n\nexport default Login","import React from 'react'\nimport './App.css'\nimport Game from './views/Game'\nimport { Router, Redirect } from '@reach/router'\nimport History from './views/History'\nimport Login from './views/Login'\n\nconst App: React.FC = () => {\n\n  return (\n    <div className='App' >\n      <h1>Type Speed</h1>\n      <Router>\n        <Game path=\"game\" />\n        <History path=\"history/:historyId\" />\n        <Login path=\"/\" />\n        <Redirect noThrow default to=\"/\" from=\"*\" />\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'normalize.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}